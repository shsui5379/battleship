VARIABLES:
- array representing a player's grid to hold arrays that represent a row of spaces, each subarray containing an object that's the back end representation of the spaces on a grid. [done]
    - add properties to track how many ships are left: number
- humanTurn: boolean [done]
- ship name to move stored as a string [done]
- ship setup mode as boolean [done]
- a scratchpad array for computer to track what it has and hasn't tried yet if it finds a ship [done]
- boolean to determine if someone lost [done]

FUNCTIONS:
splash page: 
- read the game mode menu to direct the player to the correct page [done]

game:
- display(array): iterates through array and update each object's el's background color [done]
    - !guessed && !ship = blue
    - ship && human's grid && !guessed = grey
    - ship && guessed = red
    - guessed && !ship = white
    - space with ship that's selected will have outline
- log(message): appends message to the log on a new line [done]
- a function to handle space selection.  pass in a space object
    - do nothing if game is over
    - if the player clicks on a space on the its own grid [done]
        - check flag to determine if the player is to move a ship
            - if so, if there's a ship, pass that space's ship property to a function that handles moving ships
            - if not, do nothing
    - if the player click on a space on the opponent's grid [done]
        - determine if it's the player's turn
            - if so, check flag to determine if the space has been guessed  
                - if not
                    - mark that space as having been guessed
                    - check if that space has a ship
                        - if so, check if all spaces containing that ship has guessed.  If so, ship has sunk
                    - update log (<player> has fired a torpedo at <coord> [and struck/sunk  <opponent>'s <ship>])
                    - update display
                    - determine if the player can go again .
                        - in standard mode: go again if previously selected space had a ship
                        - in salvo: go x times, where x is the number of ships on the player's grid, unless the player hit a ship
                        - call computer to make a guess if it's no longer human's turn 
                        - if a board has 0 ships left, end game and log <loser> lost all their ships
                        - return if the space has a ship, so computer knows when it hit something
                - if so, do nothing
            - if not, do nothing 
- moving a ship [done]
    - when a ship has been selected, the object for their spaces will be marked as selected, so that display would outline the spaces. all other ships would have selected marked false
    - ship name stored in a global
    - press 1 rotates ship clockwise.  2 for counterclockwise.  rotation happens around the top of left most space occupied by the ship. make sure that the center of rotation's distance to an edge isn't shorter than the ship, in the direction the ship is to rotate in 
    - to move up/down/left/right, make sure ship isn't on edge of the direction its to move.  
    - up/down: move the ship property to the spaces in the previous/next row-array
    - left/right: move the ship property to the spaces in the previous/next index
    - before actually moving, make sure that the spaces they were to be in doesn't already have a ship property
    - display
- randomize computer's grid [done]
    -randomly pick points to start a ship
    - then randomly pick which ship should go there
    - randomly pick a direction
    - Regenerate direction or point if overlap would happen
- pick computer's move [done]
    - selected space is passed into the selection function
    - by default
        - pick a random space
        - check if space is occupied
            - if so pick another opponent
    - if last selection hit something
        - store that coord in computer's scratchpad array
        - try going consecutive spaces in each of the 4 directions.  Try a new direction once it finds a shipless space
        - keep going like that until a human ship has sunk.  then clear its scratchpad
- RNG [done]
- reset [done]
    - make all guessed states false
    - display
    - allow moving ships again
    - regenerate computer's grid
    - clear log
- create space objects [done]
    - x coord: string
    - y coord: number
    - haveBeenGuessed: boolean
    - ship: null or string
    - el: HTMLSpanElement
    - isHumanGrid: boolean
    - selected: boolean - used for highlighting a ship to move
- create a row of spaces spans, that have a path to the backend space object  [done]
    - the space objects of the same row are put into an array
    - spans have an onclick event listener that calls a function that processes selections, and passes in its backend representation
- create a grid by making rows [done]

INTERFACE: 
splash page: [done]
- title
- instructions
- a menu to pick from standard mode and salvo mode
- a button to start playing

game: 
- 2 11x11 grids side by side [done]
    - rows labeled 1-10
    - columns labeled A-J
    - player's grid in the middle, computer's grid on the right [done]
- a scrollable log of player moves on the left [done]

- a space on the grid that hasn't been guessed yet is blue
- a guessed space that has no ship is white
- a space with a ship (on player's grid) is grey
- a guessed space that has a ship is red
- each space is a square, with width that should be 3.4% of viewport width [done]
- reset button [done]

- start with the ships on the left of the top 5 rows

- a button to lock in ship position [done]

FLOW:
- player selects a mode on index.html, and button onclick brings the player to the correct page for the mode [done]
- generate grids for both players [done]
- randomize ship placements for computer's grid [done]
- let player move ships until lock button is pressed [done]
- when it's the human's turn, click spaces on opponent's grid, which calls selection function, passing in that space's backend object to handle what happends [done]
- determine who goes next [done]
- when it's computer's turn, computer picks random column and row on human's grid and calls selection function while passing in that space's backend object [done]
- determine who goes next [done]
- keep going back and forth until a player has 0 ships left [done]

MISC. NOTES:
each space on the grid has an onclick event listener that calls a function that processes selections, and passes in its backend representation

to move a ship, pressing 1 rotates CW, 2 rotates CCW, and key down on arrow keys to move

ships:
- aircraft carrier: 5 spaces
- battleship: 4 spaces
- destroyer: 3 spaces
- submarine: 3 spaces
- patrol boat: 2 spaces

standard mode: go again as long as player hit something
salvo mode: x turns for x ships, until player hits something